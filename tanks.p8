pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
// general

function _init()
	entity_id = 0
	gameover = false
	wait_t = 0
	t = 0
	p={
		id = get_entity_id(),
		x = 64,
		y = 64,
		xvel=0, // used when knocked
		yvel=0,
		move = false,
		spr = 0,
		t_angle = 0,
		pow = 0.5,
		is_grounded = false,
		health=100,
		max_health=100,
		health_regen=10,
		is_knocked=false,
		cd=80,
		cur_cd=80,
		tickstep=20
	}
	load_room(0,0)
end

function _update()
	if wait_t > 0 then
		wait_t -= 1
		return
	end
	t+=1
	handle_input()
	update_world()
	update_player()
	update_enemies()
	update_shots()
	update_particles()
	update_explosions()
end

function _draw()
	cls()
	draw_world()
	draw_player()
	draw_enemies()
	draw_shots()
	draw_particles()
	draw_explosions()
	draw_types()
	draw_bounds()
	draw_ui()
end

function get_entity_id()
	entity_id += 1
	return entity_id
end

function lerp(a,b,t)
 local result=a+t*(b-a)
 return result
end

//https://www.lexaloffle.com/bbs/?tid=36059
function approx_dist(dx,dy)
 local maskx,masky=dx>>31,dy>>31
 local a0,b0=(dx+maskx)^^maskx,(dy+masky)^^masky
 if a0>b0 then
  return a0*0.9609+b0*0.3984
 end
 return b0*0.9609+a0*0.3984
end
	
-->8
// player stuff

x_hold_frames = 0
x_tap = 7

function handle_input()
	if gameover then
		if btn(❎) then
			_init()
		end
		return
	end

	local prev_x = p.x
	local angle = 0
	local fl_x = flr(p.x)
	local fl_y = flr(p.y)
	p.move = false

	// movement
	if not p.is_knocked then
		if btn(⬅️) and (bounds==false or p.x > 1) then
			local target_x = p.x-1
			local target_y = get_ground(flr(target_x),fl_y)
			local angle = atan2(-1,(fl_y-target_y))
			if (angle > 0.25 and angle < 0.7) then
				p.x += cos(angle) * 0.5
				p.y -= sin(angle) * 0.5
			end
		end
		if btn(➡️) and (bounds==false or p.x < 127) then
			local target_x = p.x+1
			local target_y = get_ground(flr(target_x),fl_y)
			local angle = atan2(1,(fl_y-target_y))
			if (angle < 0.25 or angle > 0.8) then
				p.x += cos(angle) * 0.5
				p.y -= sin(angle) * 0.5
			end
		end
	end

	// shooting
	if btn(❎) then //holding ❎
		x_hold_frames += 1
	elseif x_hold_frames > 0 then
		if x_hold_frames <= x_tap then
			if (p.cur_cd<=4 and p.cur_cd>=-4) then
				acc.combo += 1
				local accuracy=abs(p.cur_cd)
				local col=0
				local text=""
				if accuracy==0 then
					text="perfect!"
					col=10
				elseif accuracy<=2 then
					text="good"
					col=11
				elseif accuracy<=4 then
					text="ok"
					col=9
				end
				add(hit_texts,{
					x=p.x-8,
					y=p.y-14,
					col=col,
					life=25,
					text=text
				})

				local spread=abs(p.cur_cd)*0.05
				spread=rnd(spread)-0.5*spread
				shoot(p.x,p.y,p.t_angle,p.pow+spread)
				p.cur_cd += p.cd
			end
		end
		x_hold_frames = 0
	end
	
	if x_hold_frames > x_tap then
		if btn(⬆️) then p.pow += 0.02 end
		if btn(⬇️) then p.pow -= 0.02 end
		p.pow=min(1.0,max(0.0,p.pow))
		if btn(⬆️) or btn(⬇️) then
			sfx(0, 3, p.pow*31, 2)
		end
	else
		if btn(⬆️) then p.t_angle += 0.01 end
		if btn(⬇️) then p.t_angle -= 0.01 end
	end
	
	if prev_x != p.x then
		p.move = true
	end

	// load next room at edges
	if not room_state.bounds then
		if p.x < 0 then
			p.x = 127
			room.x -= 1
			load_room(room.x, room.y)
		elseif	p.x > 127 then
			p.x = 0
			room.x += 1
			load_room(room.x, room.y)
		elseif	p.y > 127 then
			p.y = 0
			room.y += 1
			load_room(room.x, room.y)
		end
	end
end

function get_ground(x, y)
	local c = 0
	while(mapget(x,y) == 0 and c < 128) do
		y += 1
		c += 1
	end
	
	while(mapget(x,y) != 0 and c < 128) do
		y -= 1
	end
	
	return y
end

// keep for testing when needed
function draw_dbg()
end

function update_player()
	if (gameover) return

	// gravity
	if not p.move and not p.is_knocked then
		local grnd = get_ground(flr(p.x),flr(p.y))
		if grnd > p.y then
			p.y += 1
			p.is_grounded = false
		else
			p.is_grounded = true
		end
	end
	if p.cur_cd<-5 then
		p.cur_cd+=p.cd
		
		add(hit_texts,{
			x=p.x-8,
			y=p.y-14,
			text="miss",
			col=8,
			life=25
		})
		acc.combo=0
	end
	p.cur_cd-=1
	
	// snd
	if p.cur_cd==0 or p.cur_cd/p.tickstep==4 then
		sfx(3,2,0,1)
	elseif p.cur_cd%p.tickstep==0 then
		sfx(2,2,0,1)
	end
end

function draw_player()
	draw_dbg()
	if (gameover) return
	
	// player sprite
	if p.move then p.spr = (t%4)/2 end
	p.x -= 4
	p.y -= 6
	spr(p.spr, p.x, p.y)
	p.x += 4
	p.y += 6

	// turret
	local tur_x = sin(p.t_angle)*4
	local tur_y = cos(p.t_angle)*4
	local t_end_x=p.x+tur_x
	local t_end_y=p.y-3+tur_y
	line(p.x, p.y-3, t_end_x, t_end_y, 7)

 // crosshair
 local cross_x = p.x+tur_x*8
 local cross_y = p.y-3+tur_y*8
 line(cross_x-2,cross_y,cross_x-4,cross_y,7)
 line(cross_x+2,cross_y,cross_x+4,cross_y,7)
 line(cross_x,cross_y-2,cross_x,cross_y-4,7)
 line(cross_x,cross_y+2,cross_x,cross_y+4,7)

 // power
 if btn(❎) and x_hold_frames > x_tap then
	 local pow_col = 8
	 if p.pow > 0.33 then pow_col=9 end
	 if p.pow > 0.66 then pow_col=11 end
	 local pow_ox = p.x+tur_x*2
	 local pow_oy = p.y-3+tur_y*2
	 local dest_x = lerp(pow_ox,cross_x,p.pow)
	 local dest_y = lerp(pow_oy,cross_y,p.pow)
	 line(pow_ox,pow_oy,dest_x,dest_y,pow_col)
	end
end
-->8
// world stuff

// falling pixels array
fallings = {}
to_del = {}

function init_world()
	cls()
	memset(0x8000, 0x00, 0x2000)
	map(room.x*16, room.y*16)
	for de in all(dumb_enemies) do
		remove_tile(de.x-4,de.y-6)
	end
	memcpy(0x8000, 0x6000, 0x2000)
end

function update_world()
	for i=#fallings,1,-1 do
		// make column fall
		local p=fallings[i]
		fallcolumn(p.x, p.y)
		
		// update column for next fall
		p.y += 1
		fallings[i]=p
		
		// column hit ground
		if mapget(p.x,p.y+1) != 0 or p.y > 126 then
			del(fallings, p)
		end
	end
end

function draw_world()
	memcpy(0x6000, 0x8000, 8000)
end

function fallcolumn(x, y)
	startcol = mapget(x, y+1)
	col = mapget(x, y)
	while col != 0 do
		mapset(x, y+1, col)
		y -= 1
		col = mapget(x,y)
		for t in all(targets) do
			if did_hit_target(x,y,t) then
				remove_target(t)
			end
		end
	end
	mapset(x, y+1, startcol)
end

function mapget(x, y)
	if (room_state.bounds and y > 123) return 0b0001111

	if (y < 0 or x < 0 or x > 127 or y > 127) return 0
	local offset = (x + y*128) / 2
	local memloc = 0x8000 + flr(offset)
	if x % 2 == 0 then
		memloc = @memloc	& 0b00001111
	else
		memloc = (@memloc & 0b11110000) >> 4
	end
	return memloc
end

function mapset(x, y, col)
	if (y < 0 or x < 0 or x > 127 or y > 127) return
	local offset = (x + y*128) / 2
	local memloc = 0x8000 + flr(offset)
	local value = @memloc
	if x % 2 == 0 then
		mask = 0b11110000
		value = (value & mask) | col
		// add color
	else
		mask = 0b00001111
		value = (value & mask) | (col << 4)
		// add color
	end
	poke(memloc, value)
end

function draw_circ(o_x, o_y, x, y, fall)
	y1 = o_y+y
	y2 = o_y-y
	y3 = o_y+x
	y4 = o_y-x
	for i = o_x-x,o_x+x do
		mapset(i, y1, 0)
		mapset(i, y2, 0)
	end
	for i = o_x-y,o_x+y do
		mapset(i, y3, 0)
		mapset(i, y4, 0)
	end
	if fall then
		local tmp_fall={}
		if mapget(o_x+x, y2 - 1) != 0 then
			add(tmp_fall, {x=o_x+x, y=y2-1})
		end
		if mapget(o_x+y, y4 - 1) != 0 then
			add(tmp_fall, {x=o_x+y, y=y4-1})
		end
		if mapget(o_x-x, y2 - 1) != 0 then
			add(tmp_fall, {x=o_x-x, y=y2-1})
		end
		if mapget(o_x-y, y4 - 1) != 0 then
			add(tmp_fall, {x=o_x-y, y=y4-1})
		end
		return tmp_fall
	end
end

function explode_brem(o_x, o_y, r, fall)
	x = 0
	y = r
	d = 3 - 2 * r
	-- split logic between falling and not falling
	if fall then
		-- save possible falling pixels
		local tmp_fall=draw_circ(o_x, o_y, x, y, fall)
		local to_add = {}
		while y >= x do
			if d > 0 then
				y -= 1
				d = d + 4 * (x - y) + 10
			else
				d = d + 4 * x + 6
			end
			
			x += 1
			local add_fall=draw_circ(o_x, o_y, x, y, fall)
			for a in all(add_fall) do
				add(tmp_fall, a)
			end
		end

		-- check which pixels to add to fallings
		-- avoids overlapping pixels
		for t in all(tmp_fall) do
			if to_add[tostring(t.x)] == nil then
				to_add[tostring(t.x)] = t
			elseif to_add[tostring(t.x)].y > t.y then
				to_add[tostring(t.x)] = t
			end
		end
		for k,v in pairs(to_add) do
			add(fallings, v)
		end
	-- not fallings
	else
		draw_circ(o_x, o_y, x, y, fall)
		while y >= x do
			if d > 0 then
				y -= 1
				d = d + 4 * (x - y) + 10
			else
				d = d + 4 * x + 6
			end
			
			x += 1
			draw_circ(o_x, o_y, x, y, fall)
		end
	end
end
-->8
// shooting & collisions

// shot={
// 	x,
// 	y,
// 	xvel,
// 	yvel,
// 	xprev,
//		yprev
// }
shots = {}
grav = 0.2

function update_shots()
	for i=#shots,1,-1 do
		s = shots[i]
		
		// hit info
		local inf = checkcol(s)
		if (inf.didhit) then
			if (inf.prevx == inf.x and inf.prevy == inf.y) then
				inf.prevx = s.xprev
				inf.prevy = s.yprev
			end
			
			ex_x=flr(inf.x)
			ex_y=flr(inf.y)
			hit_col=mapget(ex_x,ex_y)
		 add(exps, {
		 	x=ex_x,
		 	y=ex_y,
		 	r=6,
		 	cur_r=1,
		 	hit_ids={},
		 	dmg=25,
				force=7})
		 
		 // map/dirt particles
		 n_x,n_y=get_q_normal(ex_x, ex_y)
		 p_x=ex_x+n_x*2
		 p_y=ex_y+n_y*2
		 for k=1,5 do
		 	add(map_parts, {
		 		x=flr(p_x),
				 y=flr(p_y),
				 xvel=rnd(5.0) - 2.5,
				 yvel=rnd(5.0) - 2.5,
				 xprev=flr(inf.prevx),
				 yprev=flr(inf.prevy),
				 life=120,
				 col=hit_col
		 	})
		 end
		end
		
		// particles
		for j=1,2 do
			add(parts, {
				x=s.x,
				y=s.y,
				xvel=rnd(1.5) - 0.75,
				yvel=rnd(1.5) - 0.75,
				xprev=s.x,
				yprev=s.y,
				life=rnd(10)+5,
				col=8+j
			})
		end
		
		// update
		s.x += s.xvel
		s.y += s.yvel
		s.yvel += grav
		if inf.didhit or s.y > 128 or s.x > 128 or s.x < 0 then
			del(shots, s)
		end
	end
end

function draw_shots()
	for i=#shots,1,-1 do
		s = shots[i]
		local dx = (s.x+s.xvel) - s.x
		local dy = (s.y+s.yvel) - s.y
		local d = sqrt(dx*dx+dy*dy)
		dy /= d
		dx /= d
		pset(s.x-dx,s.y-dy,8)
		line(s.x,s.y,s.x+s.xvel,s.y+s.yvel,7)
	end
end

function shoot(x, y, angle, vel)
	vel *= 6
	vel += 1
	local dx = sin(angle)
	local dy = cos(angle)
	local ox = x+dx*4
	local oy = y-3+dy*4
	local s = {
		x = ox,
		y = oy,
		xvel = dx*vel,
		yvel = dy*vel
	}
	add(shots, s)
	sfx(1)
end
-->8
//exp = {
//	x=0,
//	y=0,
//	r=5,
//	cur_r=0,
// hit_ids=[],
// dmg=25
//}

exps={}

function update_explosions()
	for i=#exps,1,-1 do
		local exp = exps[i]
		eq = exp.cur_r == exp.r
		explode_brem(exp.x, exp.y, exp.cur_r, eq)
		handle_exp_hits(exp)
	end
end

function handle_exp_hits(exp)
	// player
	if not tbl_contains(exp.hit_ids,p.id) then
		if handle_exp_hit(exp,p) then
			p.health-=exp.dmg
			if p.health <= 0 then
				gameover = true
			end
			p.is_knocked=true
			local f_x, f_y=get_knockback(p,exp)
			p.xvel=f_x
			p.yvel=f_y
			add(knocked_entities,p)
			add(hit_texts,{
				x=p.x-2,
				y=p.y,
				col=2,
				life=30,
				text=exp.dmg
			})
		end
	end

	// enemies
	for e in all(dumb_enemies) do
		if not tbl_contains(exp.hit_ids,e.id) then
			if handle_exp_hit(exp,e) then
				e.health-=exp.dmg
				add(hit_texts,{
					x=e.x-2,
					y=e.y,
					col=8,
					life=30,
					text=exp.dmg
				})
				if e.health <= 0 then
					del(dumb_enemies,e)
					check_room_state()
				else
					e.is_knocked=true
					local f_x, f_y=get_knockback(e,exp)
					e.xvel=f_x
					e.yvel=f_y
					add(knocked_entities,e)
				end
			end
		end
	end
	
	for t in all(targets) do
		if not tbl_contains(exp.hit_ids,t.id) then
			local t_hit = circle_rect_col(exp.x,exp.y,exp.cur_r,t.x+3.5,t.y+3.5)
			if t_hit then
				remove_target(t)
			end
		end
	end
end

function handle_exp_hit(exp,target)
	local dist = approx_dist(abs(target.x-exp.x),abs(target.y-exp.y))
	if dist <= exp.cur_r then
		add(exp.hit_ids, target.id)
		return true
	end
	return false
end

function draw_explosions()
	for i=#exps,1,-1 do
		local exp = exps[i]
		circ(exp.x, exp.y, exp.cur_r, 8)
		exp.cur_r += 1
		if exp.cur_r > exp.r then
			del(exps, exp)
		end
	end	
end

function tbl_contains(tbl,item)
	for i=1,#tbl do
		if tbl[i]==item then
			return true
		end
	end
	return false
end
-->8
// particles

//particle = {
//	x,
//	y,
//	xvel,
//	yvel,
// xprev,
// yprev,
//	life,
//	col
//}

parts = {}
map_parts = {}

function update_particles()
	for i=#parts,1,-1 do
		local p=parts[i]
		p.x += p.xvel
		p.y += p.yvel
		p.life -= 1
	end
	
	for i=#map_parts,1,-1 do
		local mp=map_parts[i]
		
		local inf = checkcol(mp)
		if inf.didhit then
			hit_x=flr(inf.x)
			hit_y=flr(inf.y)
			n_x,n_y=get_q_normal(hit_x,hit_y)
			mp_x=hit_x+n_x
			mp_y=hit_y+n_y
			mapset(mp_x, mp_y, mp.col)
			add(fallings, {x=mp_x, y=mp_y})
		end
		
		mp.x += mp.xvel
		mp.y += mp.yvel
		mp.yvel += grav
		mp.life -= 1
		
		if inf.didhit or mp.y > 128 or mp.x > 128 or mp.x < 0 then
			del(map_parts, mp)
		end
	end

	for i=#knocked_entities,1,-1 do
		local ent=knocked_entities[i]
		local inf=checkcol(ent)

		if inf.didhit then
			local hit_x=flr(inf.x)
			local hit_y=flr(inf.y)
			local n_x, n_y=get_q_normal(hit_x,hit_y)
			ent_x=hit_x+n_x
			ent_y=hit_y+n_y
			ent.x=ent_x
			ent.y=ent_y
			ent.is_knocked=false
			del(knocked_entities, ent)
		else
			ent.x += ent.xvel
			ent.y += ent.yvel
			ent.yvel += grav
			if ent.x < 0 and room_state.bounds then
				ent.x -= ent.x
				ent.xvel = -ent.xvel
			elseif ent.x > 127 and room_state.bounds then
				ent.x -= (ent.x-127)
				ent.xvel = -ent.xvel
			end
		end
	end
end

function get_knockback(ent, exp)
	local raw_dir_x=ent.x-exp.x
	local raw_dir_y=ent.y-(exp.y+2) // better sim of center of mass
	local length=sqrt(raw_dir_x^2+raw_dir_y^2)
	local norm_x=raw_dir_x/length
	local norm_y=raw_dir_y/length
	local scaling=1-(exp.cur_r/exp.r)
	local x=norm_x*scaling*exp.force
	local y=norm_y*scaling*exp.force
	return x, -abs(y)
end

function draw_particles()
	for i=#parts,1,-1 do
		local p=parts[i]
		pset(p.x, p.y, p.col)
		if (p.life <= 0) del(parts, p)
	end
	
	for i=#map_parts,1,-1 do
		local mp=map_parts[i]
		pset(mp.x, mp.y, mp.col)
		line(mp.x,mp.y,mp.x+mp.xvel,mp.y+mp.yvel,mp.col)
		checkcol(mp)
		if (mp.life <= 0) del(map_parts, mp)
	end
end
-->8
// collisions
function checkcol(s)
	local x0 = s.x
	local y0 = s.y
	local x1 = s.x + s.xvel
	local y1 = s.y + s.yvel
	
	if abs(y1 - y0) < abs(x1 - x0) then
		return checkcollow(x0, y0, x1, y1)
	end
	return checkcolhigh(x0, y0, x1, y1)
end

function checkcollow(x0, y0, x1, y1)
 dx = x1 - x0
 dy = y1 - y0
 yi = sgn(dy)
 xi = sgn(dx)
 d = (2 * dy * yi) - dx*xi
 y = y0
 prevx = x0
 prevy = y

 for x=x0,x1,xi do
  if (mapget(flr(x),flr(y)) != 0) then
   local d = sqrt(dx*dx+dy*dy)
  	dx /= d
  	dy /= d
  	return {
	  	didhit=true,
	  	x=x,
	  	y=y,
	  	prevx=prevx,
	  	prevy=prevy
	  }
  end
  
 	if d > 0 then
 		y += yi
 		d += 2 * (dy*yi - dx*xi)
		else
			d += 2*dy*yi
		end
		
		prevx = x
		prevy = y
	end
	//check endpoint
	if (mapget(flr(x1),flr(y1)) != 0) then
		return {
	 	didhit=true,
	 	x=x1,
	 	y=y1,
	 	prevx=prevx,
	 	prevy=prevy
	 }
	end
 
	return {didhit=false}
end

function checkcolhigh(x0, y0, x1, y1)
 dx = x1 - x0
 dy = y1 - y0
 xi = sgn(dx)
 yi = sgn(dy)
 d = 2 * dx - dy*yi
 x = x0
 prevx = x
 prevy = y0
 
 for y=y0,y1,sgn(dy) do
  if (mapget(flr(x),flr(y)) != 0) then
  	local d = sqrt(dx*dx+dy*dy)
  	dx /= d
  	dy /= d
  	return {
	  	didhit=true,
	  	x=x,
	  	y=y,
	  	prevx=prevx,
	  	prevy=prevy
	  }
	 end
	 
 	if d > 0 then
 		x += xi
 		d += 2 * (dx*xi - dy*yi)
		else
			d += 2*dx*xi
		end
		
		prevx = x
		prevy = y
	end
	//check endpoint
	if (mapget(flr(x1),flr(y1)) != 0) then
		return {
	 	didhit=true,
	 	x=x1,
	 	y=y1,
	 	prevx=prevx,
	 	prevy=prevy
	 }
	end

	return {didhit=false}
end

-- get the terrain normal at (x, y)
function get_normal(x, y)
 local dx = 0
 local dy = 0

 for offset_y = -1, 1 do
  for offset_x = -1, 1 do
   if offset_x != 0 or offset_y != 0 then
     	
    local value = mapget(flr(x + offset_x), flr(y + offset_y))
    dx += offset_x * value
    dy += offset_y * value
   end
  end
 end

 -- flip gradient to get normal
 local normal_x = -dx
 local normal_y = -dy

 -- normalize the vector
 local length = sqrt(normal_x^2 + normal_y^2)
 if length > 0 then
  normal_x /= length
  normal_y /= length
 end

 return normal_x, normal_y
end

-- get quantized normal at (x, y)
function get_q_normal(x, y)
	local normal_x, normal_y = get_normal(x, y)
	local quantized_x = flr(normal_x + 0.5) -- round to nearest integer
	local quantized_y = flr(normal_y + 0.5) -- round to nearest integer
	return quantized_x, quantized_y
end
-->8
// map types and room loading
room = {x=0,y=0}
room_state={
	completed=false,
	bounds=true
}
targets = {}
dumb_enemies = {}
hit_texts = {}
knocked_entities={}

empty_t = 63
target_t = 62
enemy_t = 61

function load_room(x,y)
 // clear
	for t in all(targets) do
		del(targets, t)
	end
	for e in all(dumb_enemies) do
		del(dumb_enemies, e)
	end
	for s in all(shots) do
		del(shots, s)
	end
	for mp in all(map_parts) do
		del(map_parts, mp)
	end
	for p in all(parts) do
		del(parts, p)
	end

	// room wrapping
	if x < 0 then
		x = 15
	elseif x > 15 then
		x = 0
	end
	if y < 0 then
		y = 7
	elseif y > 7 then
		y = 0
	end

	room.x = x
	room.y = y

	for tx=0,15 do
		for ty=0,15 do
		 local tile = mget(room.x*16+tx,room.y*16+ty)
		 if tile==target_t then
		 	add(targets, {
					id=get_entity_id(),
		 		x=tx*8,
		 		y=ty*8
		 	})
			elseif tile==enemy_t then
		 	add(dumb_enemies, {
					id=get_entity_id(),
		 		x=tx*8+4, // offset sprite
		 		y=ty*8+6, // offset sprite
					xvel=0,
					yvel=0,
		 		t_angle=0.4,
					target_angle=0.4,
		 		pow=0.5,
					health=25,
					max_health=25,
					is_knocked=false,
					cd=140,
					cur_cd=140
		 	})
			end
		end
	end

	init_world()
	check_room_state() //could load room with no enemies
end

function remove_tile(x,y)
	for tx=x,x+7 do
		for ty=y,y+7 do
			pset(tx,ty,0)
		end
	end
end

function remove_target(t)
	del(targets,t)
	add(hit_texts,{
		x=t.x+3,
		y=t.y-3,
		col=10,
		life=30,
		text="+1"
	})
	check_room_state()
end

// hit_text:x,y,col,life,text
function draw_types()
	for ht in all(hit_texts) do
		print(ht.text,ht.x,ht.y,ht.col)
		ht.life -= 1
		ht.y -= 0.5
		ht.x += cos(ht.y*0.1)*0.5
		if ht.life < 0 then
			del(hit_texts, ht)
		end
	end
end

function check_room_state()
	if #dumb_enemies==0 and #targets==0 then
		if not room_state.completed then
			p.health += p.health_regen
			p.health = min(p.health, p.max_health)
		end
		room_state.bounds = false
		room_state.completed = true
	else
		room_state.bounds = true
		room_state.completed = false
	end
end

function draw_bounds()
	if room_state.bounds then
		line(127,0,127,124,1)
		line(127,124,0,124,1)
		line(0,124,0,0,1)
	end
end

function did_hit_target(x,y,t)
	if x>=t.x and x<=t.x+7 and y>=t.y	and y<=t.y+7 then
		return true
	end
	return false
end

function circle_rect_col(cx,cy,r,rx,ry)
	local testx = cx
	local testy = cy
	local w = 3.5

	if cx < rx then testx=rx
	elseif cx > rx+w then testx=rx+w
	end
	if cy < ry then testy = ry
	elseif cy > ry+w then testy=ry+w
	end

	local distx=cx-testx
	local disty=cy-testy
	local dist=sqrt(distx^2+disty^2)

	if dist <= r then
		return true
	end
	return false
end

-->8
// enemies
function update_enemies()
	for de in all(dumb_enemies) do
		if de.cur_cd==0 then
			de.pow=abs(p.x-de.x)*0.65*0.01
			shoot(de.x,de.y,de.t_angle,de.pow)
			de.cur_cd=de.cd
		end
		de.cur_cd-=1
		
		if mapget(de.x,de.y+1)==0 then
			de.y+=1
		end

		// mirror based on player pos
		if p.x-de.x<0 and de.target_angle>0.5 then
			de.target_angle-=(de.target_angle-0.5)*2
		elseif p.x-de.x>0 and de.target_angle<0.5 then
			de.target_angle+=(0.5-de.target_angle)*2
		end

		de.t_angle=de.target_angle+sin(time()*0.2312)*0.08
	end
end

function draw_enemies()
	for de in all(dumb_enemies) do
		de.x -= 4
		de.y -= 6
		spr(61,de.x,de.y)
		de.x += 4
		de.y += 6

		local tur_x = sin(de.t_angle)*4
		local tur_y = cos(de.t_angle)*4
		local t_end_x=de.x+tur_x
		local t_end_y=de.y-3+tur_y
		line(de.x, de.y-3, t_end_x, t_end_y, 7)
	end
end
-->8
// todo

--playtest
---have too many unanswered questions
--entity dependant shots
---each enemy and player can deal
---varied damage, and have
---larger/smaller explosion radius

//thoughts
///should timing reset when you press too early?
///should shots bounce or explode on wall bounds?
///maybe the player should spawn on a preset location each level?
-->8
//ui
acc={
	combo=0,
	combo_col=7
}

function draw_ui()
	print("combo: "..acc.combo.."x",0,0,acc.combo_col)
	draw_acc_marker(125)
	draw_acc_marker(126)
	draw_acc_marker(127)
	draw_player_cd(p.cur_cd,p.cd,126,12,5)
	draw_cd(p.cur_cd,p.cd,127,12)
	draw_cd(p.cur_cd,p.cd,126,12)
	draw_cd(p.cur_cd,p.cd,125,12)
 for e in all(dumb_enemies) do
		draw_cd(e.cur_cd,e.cd,127,8)
		draw_healthbar(e.x,e.y,e.health,e.max_health)
 end

	if gameover then
		print("game over", 42, 60, 8)
		print("press ❎ to restart", 24, 70, 8)
		return
	end
	draw_healthbar(p.x,p.y,p.health,p.max_health)
end

function draw_acc_marker(y)
	pset(1,y,8)
	pset(2,y,8)
	pset(3,y,9)
	pset(4,y,9)
	pset(5,y,11)
	pset(6,y,9)
	pset(7,y,9)
	pset(8,y,8)
	pset(9,y,8)
end

function draw_cd(cur_cd,cd,y,col)
	local cddraw=cur_cd+5
	while cddraw < 128 do
		pset(cddraw,y,col)
		cddraw+=cd
	end
end

function draw_player_cd(cur_cd,cd,y,col,tickcol)
	local cddraw=cur_cd+5
	while cddraw < 128 do
		pset(cddraw,y+1,col)
		pset(cddraw,y,col)
		pset(cddraw,y-1,col)
		cddraw+=cd
	end
	
	cddraw -= p.tickstep
	while cddraw > 0 do
		pset(cddraw,y,tickcol)
		cddraw -= p.tickstep
	end
end

function draw_healthbar(x,y,hp,max_hp)
	local length=7
	local draw_length=(hp/max_hp)*length
	line(x-4,y-8,x-4+draw_length,y-8,8)
end
__gfx__
00000000000000003333333344444444444440004000000000000000330000004000000000000004000000000000000000000000000000000000000000000000
00000000000000003344343444444444444440004000000000000000343300004400000000000044000000000000000000000000000000000000000000000000
00000000000000004444344444444444444444004400000000000000444333004440000000000444000000000000000000000000000000000000000000000000
000cc000000cc0004444444444444444444444004400000000000000444434334444000000004444000000000000000000000000000000000000000000000000
07cccc7007cccc704444444444444444444444404440000033000000444444434444400000044444000000000000000000000000000000000000000000000000
0cccccc00cccccc04444444444444444444444404440000034330000444444444444440000444444000000000000000000000000000000000000000000000000
15151515515151514444444444444444444444444444000044433300444444444444444004444444000000000000000000000000000000000000000000000000
51515151151515154444444444444444444444444444000044443433444444444444444444444444000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008888888800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008777777800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008788887800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000880008787787800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088888808787787800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088888808788887800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151515158777777800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000515151518888888800000000
__map__
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f000000000000000000003f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020202020202020202020202023f3f3f3f000000000000000000003e0000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
131313131313131313131313133e3f3f3f00000000000000000000033f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00000000000000000000033f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00000000000000000000000300000000000000000000000000000000000000000000000000000000090800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00000000000000000000003f00000000000000000000000000000000000000000000000000000009131308000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020213131308000000000000003f0000000000003e0000000000000000131313000000000000003f0913131313080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
13131313131313131313131313131313131313131313131313131313131313131313130000000000000000133e131313130000003f0913131313131308003d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0313131303030303131303030313030313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00000000000000000000000013130000000000000000000000000000131300000000000000003f3f3f3f00001313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000003f3f3f3f000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
003d0000000000000000000000003d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0013000000000000000000000000130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
003f0000000000000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313131313131313131313131313131300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000012002120041200512007120091200b1200c1200e1201012011120131201512017120181201a1201c1201d1201f1202112023120241202612028120291202b1202d1202f12030120321203412035120
570100000015003150061500915013150291501d150171501415011150101500c1500a15008150071500515002150001500010000100021000010000100011000010000100001000110000100001000010000100
8e1000003961300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d61000003f62000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8e20000018a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
